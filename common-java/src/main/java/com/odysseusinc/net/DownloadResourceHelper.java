package com.odysseusinc.net;

import com.google.common.io.Files;
import com.odysseusinc.util.ExtractHelper;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.*;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.BufferedHttpEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.LaxRedirectStrategy;
import org.apache.http.impl.cookie.BasicClientCookie;
import org.apache.http.message.BasicNameValuePair;

import java.io.*;
import java.net.URISyntaxException;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.odysseusinc.util.IllegalUpdateStateException;

/**
 * Created by Sanders on 5/23/2017.
 */

public class DownloadResourceHelper {
    /**
     * Names of using cookies.
     *
     * COOKIE_JSESSIONID - session identifier on UMLS login service;
     * COOKIE_CASTGC - client authentication cookie for UMLS login service;
     * COOKIE_MOD_AUTH_CAS - client ticket-authentication cookie for UMLS download service.
     */
    public static final String COOKIE_JSESSIONID = "JSESSIONID";
    public static final String COOKIE_CASTGC = "CASTGC";
    public static final String COOKIE_CASPRIVACY = "CASPRIVACY";
    public static final String COOKIE_MOD_AUTH_CAS = "MOD_AUTH_CAS";
    public static final int NUMBER_OF_ATTEMPTS = 3;

    private CloseableHttpClient httpClient;
    private File downloadPath;
    private Properties resourceProperties;

    /**
     * Presumably "Login Ticket" parameter.
     * Used on user form during authentication, generated by UMLS login service when new session is created.
     */
    private String ltParam;

    /**
     * Class-level cookie store
     */
    private List<Cookie> localCookieStore;

    /**
     * Apache CookieStore for all cookies.
     * Isn't used because of using class-level cookie store.
     */
//    private CookieStore cookieStore;

    /**
     * Instance of Download Helper.
     */
    private static DownloadResourceHelper singleInstance;

    /**
     * Contructor
     */
    private DownloadResourceHelper(File downloadPath, boolean autoRedirects) {
        if (downloadPath == null || !downloadPath.exists()) {
            // Prepare temporary storage for content
            this.downloadPath = Files.createTempDir();
            this.downloadPath.deleteOnExit();
        } else
            this.downloadPath = downloadPath;

        this.localCookieStore = new ArrayList<>();

        // Load resource properties
        this.resourceProperties = loadProps("./Update_UMLS.properties");

        // Create HttpClient
        HttpClientBuilder httpClientBuilder =HttpClients.custom()
//                .setProxy(new HttpHost("127.0.0.1", 8888))
                .addInterceptorLast(
                        (HttpRequestInterceptor) (httpRequest, httpContext) -> {
                            debugRequestHeaders(httpRequest);
                        })
                .addInterceptorLast(
                        (HttpResponseInterceptor) (httpResponse, httpContext) -> {
                            debugResponseHeaders(httpResponse);
                        });

        // Configure HttpClient
        if (autoRedirects) {
            // With automatic redirect processing (further used for UMLS download)
            httpClientBuilder.setRedirectStrategy(new LaxRedirectStrategy()) // adds HTTP REDIRECT support to GET and POST methods
            ;
        } else {
            // With step-by-step redirect processing (firstly used for LOINC download)
            httpClientBuilder
                    .disableCookieManagement()
                    .disableRedirectHandling()
                    .addInterceptorLast(
                            (HttpRequestInterceptor) (httpRequest, httpContext) -> {
                                /**
                                 * Remove default headers
                                 */
                                httpRequest.removeHeaders("Accept");
                                httpRequest.removeHeaders("Accept-Encoding");
                                httpRequest.removeHeaders("Accept-Language");
                                httpRequest.removeHeaders("Connection");
                                httpRequest.removeHeaders("Cache-Control");
                                httpRequest.removeHeaders("Pragma");
                                httpRequest.removeHeaders("User-Agent");
                                httpRequest.removeHeaders("Referer");
                                /**
                                 * Add common request headers
                                 */
                                httpRequest.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");
                                httpRequest.addHeader("Accept-Encoding", "gzip, deflate, sdch, br");
                                httpRequest.addHeader("Accept-Language", "en-US,en;q=0.8,ru;q=0.6,uk;q=0.4");
                                httpRequest.addHeader("Cache-Control", "no-cache");
                                httpRequest.addHeader("Connection", "keep-alive");
                                httpRequest.addHeader("Pragma", "no-cache");
                                httpRequest.addHeader("Upgrade-Insecure-Requests", "1");
                                httpRequest.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36");

                            })
                    .addInterceptorLast(
                            (HttpResponseInterceptor) (httpResponse, httpContext) -> {
                                /**
                                 * Adding of cookie from response to class-level local storage.
                                 */
                                saveClientCookie(httpResponse);
                            });
        }
        this.httpClient = httpClientBuilder.build();
    }

    /**
     * Get instance
     *
     * @return
     */

    public static DownloadResourceHelper getDownloadResourceHelper() {
        return getDownloadResourceHelper(null);
    }

    public static DownloadResourceHelper getDownloadResourceHelper(File downloadPath) {
        return getDownloadResourceHelper(downloadPath, false);
    }

    public static DownloadResourceHelper getDownloadResourceHelper(File downloadPath, boolean autoRedirects) {
        if (singleInstance == null) {
            singleInstance = new DownloadResourceHelper(downloadPath, autoRedirects);
        }
        return singleInstance;
    }

    /**
     * Extract header value from response
     *
     * @param response
     * @param name
     * @return
     */
    private String getResponseHeaderValue(HttpResponse response, String name) {
        Header header = response.getLastHeader(name);
        if (header == null) {
            return "";
        } else {
            return header.getValue();
        }
    }

    /**
     * Convert array to List
     *
     * @param objects
     * @return
     */
/*
    private <T> List<T> getListFromArray(T[] objects) {
        List<T> result = new ArrayList<T>();
        for (T c: objects) {
            if (c != null)
                result.add(c);
        }
        return result;
    }
*/

    /**
     * Return all saved client's cookies.
     *
     * @return
     */
    private List<Cookie> getAllStoredCookies() {
        List<Cookie> ckList = new ArrayList<>();
        Iterator<Cookie> it = this.localCookieStore.iterator();
        while (it.hasNext()) {
            ckList.add(it.next());
        }
        return ckList;
    }

    /**
     * Get client cookie from local storage.
     *
     * @param name
     * @return
     */
    private Cookie getClientCookie(String name) {
        Cookie cookie = null;
        Iterator<Cookie> it = this.localCookieStore.iterator();
        while (it.hasNext()) {
            Cookie c = it.next();
            if (c.getName().equalsIgnoreCase(name)) {
                cookie = c;
                break;
            }
        }
        return cookie;
    }

    /**
     * Class-level Cookie Storage.
     *
     * @param response
     */
    private void saveClientCookie(HttpResponse response) {
        Header[] chArray = response.getHeaders("Set-Cookie");
        if (chArray == null)
            return;

        List<Header> chList = Arrays.asList(chArray);
        for (Header header: chList) {
            boolean skipCookie = false;
            String nameValue = header.getValue().substring(0, header.getValue().indexOf(";"));
            Cookie newCookie = new BasicClientCookie(nameValue.split("=")[0], nameValue.split("=")[1]);

            Iterator<Cookie> it = this.localCookieStore.iterator();
            while (it.hasNext()) {
                Cookie c = it.next();
                if (c.getName().equalsIgnoreCase(newCookie.getName())) {
                    skipCookie = true;
                    continue;
                }
            }
            if (!skipCookie)
                this.localCookieStore.add(newCookie);
        }
    }

    /**
     * Add multiple cookies to response.
     *
     * @param request
     * @param cookies
     * @return
     */
    private HttpRequest setRequestCookies(HttpRequest request, List<Cookie> cookies) {
        if (cookies == null || cookies.isEmpty())
            return request;

        StringBuilder sb = new StringBuilder();
        for (Cookie c: cookies) {
            if (c != null) {
                if (sb.toString().length() != 0)
                    sb.append(";");
                sb.append(String.format("%s=%s", c.getName(), c.getValue()));
            }
        }
        if (sb.length() > 0)
            request.addHeader("Cookie", sb.toString());
        return request;
    }

    /**
     * Convert parameter's map to name-value format, for convenient usage for Apache's classes.
     *
     * @param params
     * @return
     */
    private List<NameValuePair> toMapNameValuePairs(Map<String, String> params) {
        List<NameValuePair> nvpList = new ArrayList<>();
        Iterator<Map.Entry<String, String>> it = params.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<String, String> entry = it.next();
            String name = entry.getKey();
            String value = entry.getValue();
            if (StringUtils.isNotBlank(name) && StringUtils.isNoneBlank(value))
                nvpList.add(new BasicNameValuePair(name, value));
        }
        return nvpList;
    }

    /**
     * Prepare GET request.
     *
     * @param url
     * @return
     * @throws IOException
     * @throws URISyntaxException
     */
    private HttpGet prepareGet(String url) throws IOException, URISyntaxException {
        return prepareGet(url, null, null);
    }

    /**
     * Prepare GET request with adding multiple cookies.
     *
     * @param url
     * @param cookies
     * @return
     * @throws IOException
     * @throws URISyntaxException
     */
    private HttpGet prepareGet(String url, List<Cookie> cookies) throws IOException, URISyntaxException {
        return prepareGet(url, null, cookies);
    }

    /**
     * Prepare parametrised GET request with adding multiple cookies.
     *
     * @param url
     * @param params
     * @param cookies
     * @return
     * @throws IOException
     * @throws URISyntaxException
     */
    private HttpGet prepareGet(String url, Map<String, String> params, List<Cookie> cookies) throws IOException, URISyntaxException {
        if (params != null && !params.isEmpty()) {
            URIBuilder uriBuilder = new URIBuilder(url);
            List<NameValuePair> pairList = toMapNameValuePairs(params);
            uriBuilder.addParameters(pairList);
            url = uriBuilder.toString();
        }
        HttpGet request = new HttpGet(url);
        setRequestCookies(request, cookies);
        return request;
    }

    /**
     * Prepare parametrised POST request
     *
     * @param url
     * @param params
     * @return
     * @throws IOException
     * @throws URISyntaxException
     */
    private HttpPost preparePost(String url, Map<String, String> params) throws IOException, URISyntaxException {
        return preparePost(url, params, null);
    }

    /**
     * Prepare parametrised POST request with adding multiple cookies.
     *
     * @param url
     * @param params
     * @param cookies
     * @return
     * @throws IOException
     * @throws URISyntaxException
     */
    private HttpPost preparePost(String url, Map<String, String> params, List<Cookie> cookies) throws IOException, URISyntaxException {
        HttpPost request = new HttpPost(url);
        if (params != null && !params.isEmpty()) {
            List<NameValuePair> pairList = toMapNameValuePairs(params);
            request.setEntity(new UrlEncodedFormEntity(pairList));
        }
        setRequestCookies(request, cookies);
        return request;
    }

    public String getDownloadPath() {
        return this.downloadPath.getPath();
    }

    /**
     * Return resource property value by it's name
     *
     * @param name
     * @return
     */
    public static String getPropertyByName(String name) {
        return getDownloadResourceHelper().resourceProperties.getProperty(name);
    }

    /**
     * Load resource properties
     */
    public static Properties loadProps(String fileName) {
        Properties  resourceProperties = new Properties();
        if (StringUtils.isNotBlank(fileName)) {
            try {
                resourceProperties.load(new FileInputStream(fileName));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return resourceProperties;
    }

    /**
     * For tracing purposes only
     * @param
     */
    private void debugStepNumber(int stepNum, String fileUrl) {
        System.out.println(String.format("\nStep %d. Get url: %s", stepNum, fileUrl));
    }

    private <T extends  HttpRequest> void debugRequestHeaders(T request) {
        System.out.println("!!!!! Request headers:");
        List<Header> lHeader = Arrays.asList(request.getAllHeaders());
        for (Header h: lHeader) {
            System.out.println(String.format("\t%s: %s", h.getName(), h.getValue()));
        }
    }

    private void debugResponseHeaders(HttpResponse response) {
        debugResponseHeaders(response, null);
    }

    private <T extends HttpResponse> void debugResponseHeaders(T response, String responseBody) {
        System.out.println("\n!!!!! Response:");
        System.out.println("\tresponse.getStatusLine():" + response.getStatusLine());
        System.out.println("\tcontent-type:" + getResponseHeaderValue(response, "Content-Type"));
        System.out.println("\tlocation:" + getResponseHeaderValue(response, "Location"));
        System.out.println("\tset-cookie:");
        List<Header> listHeaders = Arrays.asList(response.getHeaders("Set-Cookie"));
        for (Header h: listHeaders) {
            System.out.println("\t\t" + h.getValue());
        }
        System.out.println("\tcontent-disposition:" + getResponseHeaderValue(response, "Content-Disposition"));
        if (StringUtils.isNotBlank(responseBody))
            System.out.println("\tresponseBody:" + responseBody);

        List<Header> lHeader = Arrays.asList(response.getAllHeaders());
        for (Header h: lHeader) {
            System.out.println(String.format("\t%s: %s", h.getName(), h.getValue()));
        }
    }
    /* For tracing purposes only */

    public String repeatableAutoUmlsDownload(String fileUrl, String userName, String password, String fileName, String packageDescription) throws IOException {
        /**
         * Try three times redownload if error occurs
         */
        return downloadUmlsResourceAutomatically(fileUrl, userName, password, fileName, packageDescription,true, NUMBER_OF_ATTEMPTS);
    }

    public String autoUmlsDownload(String fileUrl, String userName, String password, String fileName, String packageDescription) throws IOException {
        return downloadUmlsResourceAutomatically(fileUrl, userName, password, fileName, packageDescription, false, 0);
    }

    public String steppedUmlsDownload(String fileUrl, String userName, String password, String fileName, String packageDescription) throws IOException {
        /**
         * Try three times redownload if error occurs
         */
        return downloadUmlsResourceStepByStep(fileUrl, userName, password, fileName, packageDescription,true, NUMBER_OF_ATTEMPTS);
    }

    public String repeatableDownloadResourceUmlsFullRedirects(String fileUrl, String userName, String password, String fileName, String packageDescription) throws IOException {
        /**
         * Try three times redownload if error occurs
         */
        return downloadUmlsResourceAutomatically(fileUrl, userName, password, fileName, packageDescription,true, NUMBER_OF_ATTEMPTS);
    }

    public String repeatableDownloadUmls(String fileUrl, String fileName, String packageDescription) throws IOException {
        return downloadUmlsResource(fileUrl, fileName, packageDescription, true, NUMBER_OF_ATTEMPTS);
    }

    public String downloadLoincResource(String fileUrl, String fileName, String packageDescription) throws IOException {
        return downloadLoincResource(fileUrl, fileName, packageDescription, false, 0);
    }

    public String repeatableDownloadResourceLoinc(String fileUrl, String fileName, String packageDescription) throws IOException {
        /**
         * Try three times redownload if error occurs
         */
        return downloadLoincResource(fileUrl, fileName, packageDescription, true, NUMBER_OF_ATTEMPTS);
    }

    // Just login UMLS
    private boolean loginUmls(String loginUrl, String userName, String password) throws IOException {
        CloseableHttpResponse response = null;
        try {
            HttpGet request = prepareGet(loginUrl);
            response = httpClient.execute(request);

            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                throw new HttpException(String.format("Unable to login UMLS service\n%s", response.getStatusLine()));
            } else
                return true;
        } catch (Exception e) {
            System.out.println("Error occurs: " + e.getMessage());
            e.printStackTrace();
            return false;
        } finally {
            if (response != null)
                response.close();
        }
    }

    // Just download UMLS routine
    public String downloadUmlsResource(String fileUrl, String fileName, String packageDescription, boolean isTryRedownload, int numberOfTries) throws IOException {
        debugStepNumber(5, fileUrl);

        CloseableHttpResponse response = null;
        OutputStream outputStream = null;
        try {
            List<Cookie> cookies = new ArrayList<>();
            cookies.add(getClientCookie(COOKIE_MOD_AUTH_CAS));
            HttpGet request = prepareGet(fileUrl, cookies);

            debugRequestHeaders(request);

            response = httpClient.execute(request);

            debugResponseHeaders(response);

            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                numberOfTries--;
                if (isTryRedownload && numberOfTries >= 0) {
                    System.out.println(String.format("Attention!\nThere is some problem of content downloading: %s.\nTry again, attempt %d of %d....", response.getStatusLine(), NUMBER_OF_ATTEMPTS - numberOfTries, NUMBER_OF_ATTEMPTS));
                    if (response != null)
                        try {
                            response.close();
                        } catch (IOException ioe) {}
                    return downloadUmlsResource(fileUrl, fileName, packageDescription, isTryRedownload, numberOfTries);
                } else {
                    throw new HttpException(String.format("Unable to download %s\n%s", packageDescription, response.getStatusLine()));
                }
            } else if (getResponseHeaderValue(response, "Content-Type").indexOf("zip") < 0) {
                throw new HttpException(String.format("%s is not a ZIP archive", packageDescription));
            }

            // Eval downloaded file name
            String contentDisposition = getResponseHeaderValue(response, "Content-Disposition");
            if (contentDisposition.length() > 0)
                fileName = contentDisposition.substring(contentDisposition.lastIndexOf("filename") + 9).replace("\"", "").replace(";", "");
            String filePath = String.format("%s%s%s", this.downloadPath.getPath(), File.separator, fileName);

            String contentLength = getResponseHeaderValue(response,"Content-Length");
            System.out.println(String.format("Downloaded '%s' file with %s bytes", fileName, contentLength));

            // Save file to stream
            BufferedHttpEntity bufEntity = new BufferedHttpEntity(response.getEntity());
            outputStream = new FileOutputStream(new File(filePath));
            IOUtils.copyLarge(bufEntity.getContent(), outputStream);
            outputStream.flush();

        } catch (Exception e) {
            System.out.println("Error occurs: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (response != null)
                response.close();
            if (outputStream != null)
                outputStream.close();
        }
        return fileName;
    }

    // Login and download resource
    public String downloadUmlsResourceStepByStep(String fileUrl, String userName, String password, String fileName, String packageDescription, boolean isTryRedownload, int numberOfTries) throws IOException {
        this.localCookieStore.clear();
        CloseableHttpResponse response = null;
        // REQUEST 1
        // Just get JSESSION cookie
        debugStepNumber(1, fileUrl);
        try {
            HttpGet request = prepareGet(fileUrl);

            debugRequestHeaders(request);

            response = httpClient.execute(request);

            // Buffer response content
            BufferedHttpEntity bufEntity = new BufferedHttpEntity(response.getEntity());
            StringWriter writer = new StringWriter();
            IOUtils.copy(bufEntity.getContent(), writer, StandardCharsets.UTF_8);
            String responseBody = writer.toString().trim();

            debugResponseHeaders(response, responseBody);

            // Remember dynamically generated presumably "Login Ticket" form parameter
            Pattern ltPattern = Pattern.compile("name=\"lt\" value=\"(\\w+)\"");
            Matcher m = ltPattern.matcher(responseBody);
            while (m.find()) {
                this.ltParam = m.group(1);
            }
        } catch (Exception e) {
            System.out.println("Error occurs: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (response != null)
                response.close();
        }

        // REQUEST 2
        // Login to UMLS
        System.out.println("Login UMLS service...");
        debugStepNumber(2, fileUrl);
        try {
            Map<String, String> params = new HashMap<String, String>();
            params.put("username", userName);
            params.put("password", password);
            params.put("lt", this.ltParam);
            params.put("_eventId", "submit");
            params.put("submit", "Sign In");
            List<Cookie> cookies = new ArrayList<>();
//            cookies.addAll(getAllStoredCookies());
            cookies.add(getClientCookie(COOKIE_JSESSIONID));
            HttpPost request = preparePost(fileUrl, params, cookies);
            request.addHeader("Content-Type", "application/x-www-form-urlencoded");

            debugRequestHeaders(request);

            response = httpClient.execute(request);

            // Buffer response content
            BufferedHttpEntity bufEntity = new BufferedHttpEntity(response.getEntity());
            StringWriter writer = new StringWriter();
            IOUtils.copy(bufEntity.getContent(), writer, StandardCharsets.UTF_8);
            String responseBody = writer.toString().trim();

            debugResponseHeaders(response, responseBody);

            /**
             * Get URL for further processing
             */
            String locationHeaderValue = getResponseHeaderValue(response, "Location");
            if (StringUtils.isNotBlank(locationHeaderValue))
                fileUrl = locationHeaderValue;

        } catch (Exception e) {
            System.out.println("Exception occurs: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (response != null)
                response.close();
        }

        // REQUEST 3
        // Authorize on download service with ticket
        debugStepNumber(3, fileUrl);
        try {
            List<Cookie> cookies = new ArrayList<>();
//            cookies.addAll(getAllStoredCookies());
            cookies.add(getClientCookie(COOKIE_JSESSIONID));
            cookies.add(getClientCookie(COOKIE_CASTGC));
            HttpGet request = prepareGet(fileUrl, cookies);

            debugRequestHeaders(request);

            response = httpClient.execute(request);

            // Buffer response content
            BufferedHttpEntity bufEntity = new BufferedHttpEntity(response.getEntity());
            StringWriter writer = new StringWriter();
            IOUtils.copy(bufEntity.getContent(), writer, StandardCharsets.UTF_8);
            String responseBody = writer.toString().trim();

            debugResponseHeaders(response, responseBody);

            /**
             * Get URL for further processing
             */
            String locationHeaderValue = getResponseHeaderValue(response, "Location");
            if (StringUtils.isNotBlank(locationHeaderValue))
                fileUrl = locationHeaderValue;

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (response != null)
                response.close();
        }

        // REQUEST 4
        // Authorize on download service
        debugStepNumber(4, fileUrl);
        try {
//            List<Cookie> cookies = new ArrayList<>();
//            cookies.addAll(getAllStoredCookies());
            HttpGet request = prepareGet(fileUrl);

            debugRequestHeaders(request);

            response = httpClient.execute(request);

            // Buffer response content
            BufferedHttpEntity bufEntity = new BufferedHttpEntity(response.getEntity());
            StringWriter writer = new StringWriter();
            IOUtils.copy(bufEntity.getContent(), writer, StandardCharsets.UTF_8);
            String responseBody = writer.toString().trim();

            debugResponseHeaders(response, responseBody);

            /**
             * Get URL for further processing
             */
            String locationHeaderValue = getResponseHeaderValue(response, "Location");
            if (StringUtils.isNotBlank(locationHeaderValue))
                fileUrl = locationHeaderValue;

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (response != null)
                response.close();
        }

        // REQUEST 5
        // Download resource
        return downloadUmlsResource(fileUrl, fileName, packageDescription, isTryRedownload, numberOfTries);
    }

    public String downloadUmlsResourceAutomatically(String fileUrl, String userName, String password, String fileName, String packageDescription, boolean isTryRedownload, int numberOfTries) throws IOException {
        CloseableHttpResponse response = null;
        OutputStream outputStream = null;
        // Get JSESSION cookie
        HttpGet getRequest = null;
        try {
            System.out.println("\nStep 1. Get url: " + fileUrl);
            getRequest = prepareGet(fileUrl);

            System.out.println("!!!!! Request headers:");
            List<Header> lHeader = Arrays.asList(getRequest.getAllHeaders());
            for (Header h: lHeader) {
                System.out.println(String.format("\t%s: %s", h.getName(), h.getValue()));
            }

            response = httpClient.execute(getRequest);

            // Buffer response content
            BufferedHttpEntity bufEntity = new BufferedHttpEntity(response.getEntity());
            StringWriter writer = new StringWriter();
            IOUtils.copy(bufEntity.getContent(), writer, StandardCharsets.UTF_8);
            String responseBody = writer.toString().trim();

            System.out.println("\n!!!!! Response:");
            System.out.println("\tresponse.getStatusLine():" + response.getStatusLine());
            System.out.println("\tcontent-type:" + getResponseHeaderValue(response, "Content-Type"));
            System.out.println("\tlocation:" + getResponseHeaderValue(response, "Location"));
            System.out.println("\tset-cookie:");
            List<Header> listHeaders = Arrays.asList(response.getHeaders("Set-Cookie"));
            for (Header h: listHeaders) {
                System.out.println("\t\t" + h.getValue());
            }
            System.out.println("\tcontent-disposition:" + getResponseHeaderValue(response, "Content-Disposition"));
            System.out.println("\tresponseBody:" + responseBody);

            // Remember dynamically generated presumably "Login Ticket" form parameter
            Pattern ltPattern = Pattern.compile("name=\"lt\" value=\"(\\w+)\"");
            Matcher m = ltPattern.matcher(responseBody);
            while (m.find()) {
                this.ltParam = m.group(1);
            }
        } catch (Exception e) {
            getRequest.abort();
            System.out.println("Error occurs: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (response != null)
                response.close();
        }

        // Login to UMLS and download package
        HttpPost postRequest = null;
        System.out.println("Login UMLS service...");
        try {
            Map<String, String> params = new HashMap<String, String>();
            params.put("username", userName);
            params.put("password", password);
            params.put("lt", this.ltParam);
            params.put("_eventId", "submit");
            params.put("submit", "Sign In");
            //List<Cookie> cookies = new ArrayList<>();
//            cookies.addAll(getAllStoredCookies());
            //cookies.add(getClientCookie(COOKIE_JSESSIONID));
            System.out.println("\nStep 2. Get url: " + fileUrl);
            postRequest = preparePost(fileUrl, params);
            postRequest.addHeader("Content-Type", "application/x-www-form-urlencoded");

            System.out.println("!!!!! Request headers:");
            List<Header> lHeader = Arrays.asList(postRequest.getAllHeaders());
            for (Header h: lHeader) {
                System.out.println(String.format("\t%s: %s", h.getName(), h.getValue()));
            }

            response = httpClient.execute(postRequest);

            // Buffer response content
            BufferedHttpEntity bufEntity = new BufferedHttpEntity(response.getEntity());
            StringWriter writer = new StringWriter();
            IOUtils.copy(bufEntity.getContent(), writer, StandardCharsets.UTF_8);
            String responseBody = writer.toString().trim();

            System.out.println("\n!!!!! Response:");
            System.out.println("\tresponse.getStatusLine():" + response.getStatusLine());
            System.out.println("\tcontent-type:" + getResponseHeaderValue(response, "Content-Type"));
            System.out.println("\tlocation:" + getResponseHeaderValue(response, "Location"));
            System.out.println("\tset-cookie:");
            List<Header> listHeaders = Arrays.asList(response.getHeaders("Set-Cookie"));
            for (Header h: listHeaders) {
                System.out.println("\t\t" + h.getValue());
            }
            System.out.println("\tcontent-disposition:" + getResponseHeaderValue(response, "Content-Disposition"));
            System.out.println("\tresponseBody:" + responseBody);

            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                numberOfTries--;
                if (isTryRedownload && numberOfTries >= 0) {
                    if (response != null)
                        try {
                            response.close();
                        } catch (IOException ioe) {}
                    System.out.println(String.format("Attention!\nThere is some problem of content downloading: %s.\nTry again, attempt %d of %d....", response.getStatusLine(), NUMBER_OF_ATTEMPTS - numberOfTries, NUMBER_OF_ATTEMPTS));
                    return downloadUmlsResourceAutomatically(fileUrl, userName, password, fileName, packageDescription, isTryRedownload, numberOfTries);
                } else {
                    throw new HttpException(String.format("Unable to download %s\n%s", packageDescription, response.getStatusLine()));
                }
            } else if (getResponseHeaderValue(response, "Content-Type").indexOf("zip") < 0) {
                throw new HttpException(String.format("%s is not a ZIP archive", packageDescription));
            }

            // Eval downloaded file name
            String contentDisposition = getResponseHeaderValue(response, "Content-Disposition");
            if (contentDisposition.length() > 0)
                fileName = contentDisposition.substring(contentDisposition.lastIndexOf("filename") + 9).replace("\"", "").replace(";", "");
            String filePath = String.format("%s%s%s", this.downloadPath.getPath(), File.separator, fileName);

            String contentLength = getResponseHeaderValue(response,"Content-Length");
            System.out.println(String.format("Downloaded '%s' file with %s bytes", fileName, contentLength));

            outputStream = new FileOutputStream(new File(filePath));
            IOUtils.copyLarge(bufEntity.getContent(), outputStream);
            outputStream.flush();

        } catch (RuntimeException rte) {
            postRequest.abort();
        } catch (Exception e) {
            postRequest.abort();
            System.out.println("Exception occurs: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (response != null)
                response.close();
        }

/*
        */
/**
         * Download
         *//*

        if (getRequest != null)
            getRequest.reset();
        try {
            getRequest = prepareGet(fileUrl);
            response = httpClient.execute(getRequest);


            debugResponseHeaders(response);

            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                numberOfTries--;
                if (isTryRedownload && numberOfTries >= 0) {
                    if (response != null)
                        try {
                            response.close();
                        } catch (IOException ioe) {}
                    System.out.println(String.format("Attention!\nThere is some problem of content downloading: %s.\nTry again, attempt %d of %d....", response.getStatusLine(), NUMBER_OF_ATTEMPTS - numberOfTries, NUMBER_OF_ATTEMPTS));
                    return downloadUmlsResource(fileUrl, fileName, packageDescription, isTryRedownload, numberOfTries);
                } else {
                    throw new HttpException(String.format("Unable to download %s\n%s", packageDescription, response.getStatusLine()));
                }
            } else if (getResponseHeaderValue(response, "Content-Type").indexOf("zip") < 0) {
                throw new HttpException(String.format("%s is not a ZIP archive", packageDescription));
            }

            // Eval downloaded file name
            String contentDisposition = getResponseHeaderValue(response, "Content-Disposition");
            if (contentDisposition.length() > 0)
                fileName = contentDisposition.substring(contentDisposition.lastIndexOf("filename") + 9).replace("\"", "").replace(";", "");
            String filePath = String.format("%s%s%s", this.downloadPath.getPath(), File.separator, fileName);

            String contentLength = getResponseHeaderValue(response,"Content-Length");
            System.out.println(String.format("Downloaded '%s' file with %s bytes", fileName, contentLength));

            // Save file to stream
            BufferedHttpEntity bufEntity = new BufferedHttpEntity(response.getEntity());
            outputStream = new FileOutputStream(new File(filePath));
            IOUtils.copyLarge(bufEntity.getContent(), outputStream);
            outputStream.flush();

        } catch (Exception e) {
            getRequest.abort();
            System.out.println("Error occurs: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (response != null)
                response.close();
            if (outputStream != null)
                outputStream.close();
        }
*/
        return fileName;

/*
        // REQUEST 3
        // Authorize on download service with ticket
        try {
//            List<Cookie> cookies = new ArrayList<>();
//            cookies.addAll(getAllStoredCookies());
            System.out.println("\nStep 3. Get url: " + fileUrl);
            HttpGet request = prepareGet(fileUrl);

            System.out.println("!!!!! Request headers:");
            List<Header> lHeader = Arrays.asList(request.getAllHeaders());
            for (Header h: lHeader) {
                System.out.println(String.format("\t%s: %s", h.getName(), h.getValue()));
            }

            response = httpClient.execute(request);

            // Buffer response content
            BufferedHttpEntity bufEntity = new BufferedHttpEntity(response.getEntity());
            StringWriter writer = new StringWriter();
            IOUtils.copy(bufEntity.getContent(), writer, StandardCharsets.UTF_8);
            String responseBody = writer.toString().trim();

            System.out.println("\n!!!!! Response:");
            System.out.println("\tresponse.getStatusLine():" + response.getStatusLine());
            System.out.println("\tcontent-type:" + getResponseHeaderValue(response, "Content-Type"));
            System.out.println("\tlocation:" + getResponseHeaderValue(response, "Location"));
            System.out.println("\tset-cookie:");
            List<Header> listHeaders = Arrays.asList(response.getHeaders("Set-Cookie"));
            for (Header h: listHeaders) {
                System.out.println("\t\t" + h.getValue());
            }
            System.out.println("\tcontent-disposition:" + getResponseHeaderValue(response, "Content-Disposition"));
            System.out.println("\tresponseBody:" + responseBody);

            */
/**
             * Get URL for further processing
             *//*

            String locationHeaderValue = getResponseHeaderValue(response, "Location");
            if (StringUtils.isNotBlank(locationHeaderValue))
                fileUrl = locationHeaderValue;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (response != null)
                response.close();
        }
*/

        // REQUEST 4
        // Download resource
        //return downloadUmlsResource(fileUrl, fileName, packageDescription, isTryRedownload, numberOfTries);
    }

    public boolean loginLoinc(String loginUrl, String userName, String password) throws IOException {
        CloseableHttpResponse response = null;
        // Login LOINC services
        try {
            Map<String, String> params = new HashMap<String, String>();
            params.put("log", userName);
            params.put("pwd", password);
            params.put("wp-submit", "Log In");
            HttpPost request = preparePost(loginUrl, params);
            response = httpClient.execute(request);

            return true;
        } catch (Exception e) {
            System.out.println("Error occurs: " + e.getMessage());
            e.printStackTrace();
            return false;
        } finally {
            if (response != null)
                response.close();
        }
    }

    public String downloadLoincResource(String fileUrl, String fileName, String packageDescription, boolean isTryRedownload, int numberOfTries) throws IOException {
        OutputStream outputStream = null;
        CloseableHttpResponse response = null;
        try {
            Map<String, String> params = new HashMap<String, String>();
            params.put("tc_accepted", "1");
            params.put("tc_submit", "Download");
            List<Cookie> cookies = getAllStoredCookies();
            HttpPost request = preparePost(fileUrl, params, cookies);
            response = httpClient.execute(request);

            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                numberOfTries--;
                if (isTryRedownload && numberOfTries > 0) {
                    if (response != null)
                        try {
                            response.close();
                        } catch (IOException ioe) {}
                    System.out.println(String.format("Attention!\nThere is some problem of content downloading: %s.\nTry again, attempt %d of %d....", response.getStatusLine(), NUMBER_OF_ATTEMPTS - numberOfTries, NUMBER_OF_ATTEMPTS));
                    return downloadLoincResource(fileUrl, fileName, packageDescription, isTryRedownload, numberOfTries);
                } else {
                    throw new HttpException(String.format("Unable to download %s\n%s", packageDescription, response.getStatusLine()));
                }
            } else if (getResponseHeaderValue(response, "Content-Type").indexOf("zip") < 0) {
                throw new HttpException(String.format("%s is not a ZIP archive", packageDescription));
            }

            // Buffer response content
            BufferedHttpEntity bufEntity = new BufferedHttpEntity(response.getEntity());
            StringWriter writer = new StringWriter();
            IOUtils.copy(bufEntity.getContent(), writer, StandardCharsets.UTF_8);
            String responseBody = writer.toString().trim();

            // Eval downloaded file name
            String contentDisposition = getResponseHeaderValue(response, "Content-Disposition");
            if (contentDisposition.length() > 0) {
                fileName = contentDisposition.substring(contentDisposition.lastIndexOf("filename") + 9).replace("\"", "").replace(";", "");
            }
            String filePath = String.format("%s%s%s", this.downloadPath.getPath(), File.separator, fileName);

            String contentLength = getResponseHeaderValue(response,"Content-Length");
            System.out.println(String.format("Downloaded '%s' file with %s bytes", fileName, contentLength));

            // Save file to stream
            outputStream = new FileOutputStream(new File(filePath));
            IOUtils.copy(bufEntity.getContent(), outputStream);
            outputStream.flush();

        } catch (Exception e) {
            System.out.println("Error occurs: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (response != null)
                response.close();
            if (outputStream != null)
                outputStream.close();
        }
        return fileName;
    }

    /**
     * Test usages
     * @param downloadHelper
     * @throws IOException
     */
    public static void testDownloadLOINC(DownloadResourceHelper downloadHelper) throws IOException {
        // Login LOINC service
        System.out.println("\nLogin LOINC service...");
        String url = getPropertyByName("downloadUpdatePack.loinc.loginUrl");
        String userName = getPropertyByName("downloadUpdatePack.loinc.username");
        String password = getPropertyByName("downloadUpdatePack.loinc.password");
        downloadHelper.loginLoinc(url, userName, password);

        // Download 'Full Set' package
        String packageDescription = getPropertyByName("downloadUpdatePack.fullSet.description");
        System.out.println(String.format("\nDownload %s...", packageDescription));
        String fileUrl = getPropertyByName("downloadUpdatePack.fullSet.fileUrl");
        String defaultFileName = getPropertyByName("downloadUpdatePack.fullSet.fileName");
        downloadHelper.downloadLoincResource(fileUrl, defaultFileName, packageDescription);

        // Download 'Multiaxial Hierarchy' package
        packageDescription = getPropertyByName("downloadUpdatePack.multiaxialHierarchy.description");
        System.out.println(String.format("\nDownload %s...", packageDescription));
        fileUrl = getPropertyByName("downloadUpdatePack.multiaxialHierarchy.fileUrl");
        defaultFileName = getPropertyByName("downloadUpdatePack.multiaxialHierarchy.fileName");
        downloadHelper.downloadLoincResource(fileUrl, defaultFileName, packageDescription);

        // Download 'Panels and Forms' package
        packageDescription = getPropertyByName("downloadUpdatePack.panelsForms.description");
        System.out.println(String.format("\nDownload %s...", packageDescription));
        fileUrl = getPropertyByName("downloadUpdatePack.panelsForms.fileUrl");
        defaultFileName = getPropertyByName("downloadUpdatePack.panelsForms.fileName");
        downloadHelper.downloadLoincResource(fileUrl, defaultFileName, packageDescription);

        // Download 'CT Expression Association' package
        packageDescription = getPropertyByName("downloadUpdatePack.expressionAssociation.description");
        System.out.println(String.format("\nDownload %s...", packageDescription));
        fileUrl = getPropertyByName("downloadUpdatePack.expressionAssociation.fileUrl");
        defaultFileName = getPropertyByName("downloadUpdatePack.expressionAssociation.fileName");
        downloadHelper.downloadLoincResource(fileUrl, defaultFileName, packageDescription);

        // Login and download from UMLS service
        System.out.println("\nLogin and download from UMLS service...");
        packageDescription = getPropertyByName("downloadUpdatePack.cptMappings.description");
        url = getPropertyByName("downloadUpdatePack.umls.loginUrl");
        userName = getPropertyByName("downloadUpdatePack.umls.username");
        password = getPropertyByName("downloadUpdatePack.umls.password");
        fileUrl = getPropertyByName("downloadUpdatePack.cptMappings.fileUrl");
        defaultFileName = getPropertyByName("downloadUpdatePack.cptMappings.fileName");
        downloadHelper.downloadResourceUmls(url, userName, password, fileUrl, defaultFileName, packageDescription);
    }

    public static void testDownloadUMLS(DownloadResourceHelper downloadHelper) throws IOException {
        /* Downloading file */
        // Start action checkpoint
        long timeStart = System.currentTimeMillis();

        /****************************************************
         * Login 'UMLS' service
         * **************************************************/
        /****************************************************
         * Download 'UMLS' package
         * **************************************************/

        String loginUrl = getPropertyByName("downloadUpdatePack.umls.loginUrl");
        String userName = getPropertyByName("downloadUpdatePack.umls.username");
        String password = getPropertyByName("downloadUpdatePack.umls.password");
        String packageDescription = getPropertyByName("downloadUpdatePack.umlsFull.description");
        System.out.println("Downloading " + packageDescription);
        String fileUrl = getPropertyByName("downloadUpdatePack.umlsFull.fileUrl");
        String defaultFileName = getPropertyByName("downloadUpdatePack.umlsFull.fileName");
        String downloadedFileName = downloadHelper.repeatableDownloadResourceUmls(loginUrl, userName, password, fileUrl, defaultFileName, packageDescription);
        System.out.println("Downloaded file: " + downloadedFileName);

        System.out.println("Downloaded complete.\nUpdate packages are saved to the: " + downloadHelper.getDownloadPath());

        // Finish action checkpoint
        long timeFinish = System.currentTimeMillis();
        long timeElapsed = (timeFinish - timeStart) / 1000;
        System.out.println("Time elapsed: " + timeElapsed + " seconds.");

        System.out.println("*** " + packageDescription + " action done ***");
    }

    public static void testDownloadUMLSFull(DownloadResourceHelper downloadHelper) throws IOException {
        /* Downloading file */
        // Start action checkpoint
        long timeStart = System.currentTimeMillis();

        /****************************************************
         * Login  and download 'Full UMLS' package
         * **************************************************/

        String fileUrl = getPropertyByName("downloadUpdatePack.umlsFull.fileUrl");
        String userName = getPropertyByName("downloadUpdatePack.umls.username");
        String password = getPropertyByName("downloadUpdatePack.umls.password");
        String packageDescription = getPropertyByName("downloadUpdatePack.umlsFull.description");
        System.out.println("Downloading " + packageDescription);
        String defaultFileName = getPropertyByName("downloadUpdatePack.umlsFull.fileName");
        String downloadedFileName = downloadHelper.steppedUmlsDownload(fileUrl, userName, password, defaultFileName, packageDescription);
        System.out.println("Downloaded file: " + downloadedFileName);

        System.out.println("Downloaded complete.\nUpdate packages are saved to the: " + downloadHelper.getDownloadPath());

        // Finish action checkpoint
        long timeFinish = System.currentTimeMillis();
        long timeElapsed = (timeFinish - timeStart) / 1000;
        System.out.println("Time elapsed: " + timeElapsed + " seconds.");

        System.out.println("*** " + packageDescription + " action done ***");
    }

    public static void testDownloadUMLSFullRedirects(DownloadResourceHelper downloadHelper) throws IOException {
        /* Downloading file */
        // Start action checkpoint
        long timeStart = System.currentTimeMillis();

        /****************************************************
         * Login  and download 'Full UMLS' package
         * **************************************************/

        String fileUrl = getPropertyByName("downloadUpdatePack.umlsFull.fileUrl");
        String userName = getPropertyByName("downloadUpdatePack.umls.username");
        String password = getPropertyByName("downloadUpdatePack.umls.password");
        String packageDescription = getPropertyByName("downloadUpdatePack.umlsFull.description");
        System.out.println("Downloading " + packageDescription);
        String defaultFileName = getPropertyByName("downloadUpdatePack.umlsFull.fileName");
        String downloadedFileName = downloadHelper.repeatableDownloadResourceUmlsFullRedirects(fileUrl, userName, password, defaultFileName, packageDescription);
        System.out.println("Downloaded file: " + downloadedFileName);

        System.out.println("Downloaded complete.\nUpdate packages are saved to the: " + downloadHelper.getDownloadPath());

        // Finish action checkpoint
        long timeFinish = System.currentTimeMillis();
        long timeElapsed = (timeFinish - timeStart) / 1000;
        System.out.println("Time elapsed: " + timeElapsed + " seconds.");

        System.out.println("*** " + packageDescription + " action done ***");
    }

    public static String testExtract() {
        File temp = Files.createTempDir();
        temp.deleteOnExit();

        ExtractHelper extractHelper = ExtractHelper.getInstance(temp);

        List<String> checkedFileNameList = new ArrayList<>();
        Properties props = loadProps("./Update_UMLS.properties");
        String checkedFilesString = props.getProperty("prepareFiles.files");
        if (StringUtils.isNotBlank(checkedFilesString))
            checkedFileNameList = Arrays.asList(checkedFilesString.split(","));

        File src = new File("E:\\temp\\data");

        for (File f : src.listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                return pathname.getName().toLowerCase().endsWith("zip")
                        || pathname.getName().toLowerCase().endsWith("gz");
            }
        })) {
            if (!extractHelper.extractArchive(f, temp, checkedFileNameList)) {
                System.out.println(String.format("!!! Cannot extract file: %s", f.getPath()));
            }
        }
        return temp.getPath();
    }


    public static void testExtractUMLS() throws IOException {
        // Start action checkpoint
        long timeStart = System.currentTimeMillis();

        List<String> checkedFileNameList = new ArrayList<>();
        Properties props = loadProps();
        String checkedFilesString = props.getProperty("prepareFiles.files");
        if (StringUtils.isNotBlank(checkedFilesString))
            checkedFileNameList = Arrays.asList(checkedFilesString.split(","));

        File workDir = new File("E:\\temp\\groovy-generated-5406289380510812740-tmpdir");
        ExtractHelper extractHelper = ExtractHelper.getInstance(workDir);
        extractHelper.extract(workDir, checkedFileNameList);

        // Finish action checkpoint
        long timeFinish = System.currentTimeMillis();

        // Measure time execution
        long timeElapsed = (timeFinish - timeStart) / 1000;
        System.out.println(String.format("Time elapsed: %,d seconds.", timeElapsed));
    }

    public static void testConcatenate(String filesPath) throws IOException {
        File fPath = new File(filesPath);

        List<String> fileMaskList = Arrays.asList("MRCONSO", "MRHIER", "MRSAT");
        LinkedHashMap<String, TreeSet<File>> orderedFilesParts = new LinkedHashMap<>();
        for (String fileMask: fileMaskList) {
            TreeSet<File> orderedFiles = new TreeSet<>();
            for (File f : fPath.listFiles(new FileFilter() {
                @Override
                public boolean accept(File pathname) {
                    return pathname.getName().toLowerCase().indexOf(fileMask.toLowerCase()) >= 0;
                }
            })) {
                orderedFiles.add(f);
            }
            String fileName = orderedFiles.first().getName();
            fileName = fileName.substring(0, fileName.lastIndexOf("."));
            orderedFilesParts.put(fileName, orderedFiles);
        }

        Iterator<Map.Entry<String, TreeSet<File>>> it = orderedFilesParts.entrySet().iterator();
        while(it.hasNext()) {
            Map.Entry<String, TreeSet<File>> e = it.next();
            String targetFile = new File(fPath, e.getKey()).getPath();
            System.out.print(String.format("Concatenating all parts of the %s file ... ", targetFile));
            FileOutputStream fos = new FileOutputStream(targetFile);
            try {
                Iterator<File> fit = e.getValue().iterator();
                while (fit.hasNext()) {
                    File partFile = fit.next();
                    FileInputStream fis = new FileInputStream(partFile);
                    try {
                        byte[] buff = new byte[8192];
                        int bytesRead;
                        while((bytesRead = fis.read(buff, 0, buff.length)) != -1) {
                            fos.write(buff, 0, bytesRead);
                        }
                    } finally {
                        if (fis != null)
                            fis.close();
                    }
                    fos.flush();
                }
            } finally {
                if (fos != null)
                    fos.close();
            }
            System.out.println(" done");
        }
    }
    /*  Test usages */


    public static void main(String[] args) throws IOException {
        DownloadResourceHelper downloadHelper = new DownloadResourceHelper(null, true);
        //testDownloadLOINC (downloadHelper);

        //testDownloadUMLS(downloadHelper);

        //testDownloadUMLSFull(downloadHelper);

        //testDownloadUMLSFullRedirects(downloadHelper); //***

//        String targetPath = testExtract();

//        testConcatenate(targetPath);

        testExtractUMLS();
    }

}